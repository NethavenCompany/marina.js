{
	"package.json": null,
	"src": {
		"components": {
			"Carousel.js": "import Component from \"../core/Component.js\";\nclass Carousel extends Component {\n}\nexport default Carousel;\n",
			"Modal.js": "import Component from \"../core/Component.js\";\nclass Modal extends Component {\n}\nexport default Modal;\n",
			"Select.js": "import Component from \"../core/Component.js\";\nclass Select extends Component {\n}\nexport default Select;\n",
			"Tabs.js": "import Component from \"../core/Component.js\";\nclass Tabs extends Component {\n}\nexport default Tabs;\n",
			"Tooltip.js": "import Component from \"../core/Component.js\";\nclass Tooltip extends Component {\n}\nexport default Tooltip;\n",
			"index.js": "import Carousel from \"./Carousel.js\";\nimport Tabs from \"./Tabs.js\";\nimport Modal from \"./Modal.js\";\nimport Select from \"./Select.js\";\nimport Tooltip from \"./Tooltip.js\";\nexport { Carousel, Tabs, Modal, Select, Tooltip };\n"
		},
		"core": {
			"BasePlugin.js": "class Plugin {\n    constructor() { }\n    install() { }\n    enable() { }\n    disable() { }\n    uninstall() { }\n}\nexport default Plugin;\n",
			"Component.js": "class Component {\n    constructor() {\n        this.settings = null;\n    }\n    ;\n    setSettings() {\n    }\n}\nexport default Component;\n",
			"Icon.js": "class Icon {\n}\nexport default Icon;\n",
			"PluginManager.js": "class PluginManager {\n}\nexport default PluginManager;\n",
			"index.js": "import Component from \"./Component.js\";\nimport Icon from \"./Icon.js\";\nimport Plugin from \"./BasePlugin.js\";\nexport { Component, Icon, Plugin };\n"
		},
		"index.js": "import Marina from \"./marina.js\";\nexport default Marina;\nexport * from \"./marina.js\";\n",
		"marina.js": "import pkg from \"../package.json\";\nimport * as components from \"./components/index.js\";\nimport * as core from \"./core/index.js\";\nimport * as utils from \"./utils/index.js\";\nimport * as theme from \"./theme/index.js\";\nconsole.log(`Marina v${pkg.version}`);\nconst Marina = {\n    version: pkg.version,\n    ...components,\n    ...core,\n    ...utils,\n    theme: new theme.ThemeManager(),\n};\nexport * from \"./components/index.js\";\nexport * from \"./core/index.js\";\nexport * from \"./utils/index.js\";\nexport default Marina;\n",
		"theme": {
			"ThemeManager.js": "var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ThemeManager_instances, _ThemeManager_currentTheme, _ThemeManager_buildThemeCss, _ThemeManager_destroyThemeCss, _ThemeManager_setRootClass, _ThemeManager_localStorage_get;\nconst DEFAULT_THEME = {\n    id: \"mra-DefaultTheme\",\n};\nclass ThemeManager {\n    constructor() {\n        _ThemeManager_instances.add(this);\n        _ThemeManager_currentTheme.set(this, void 0);\n        __classPrivateFieldSet(this, _ThemeManager_currentTheme, DEFAULT_THEME, \"f\");\n    }\n    setCurrentTheme(themeId) {\n        const theme = this.getTheme(themeId);\n        __classPrivateFieldGet(this, _ThemeManager_instances, \"m\", _ThemeManager_buildThemeCss).call(this, theme);\n        __classPrivateFieldGet(this, _ThemeManager_instances, \"m\", _ThemeManager_setRootClass).call(this, theme.id);\n    }\n    getCurrentTheme() {\n        return __classPrivateFieldGet(this, _ThemeManager_currentTheme, \"f\");\n    }\n    getTheme(themeId) {\n        return __classPrivateFieldGet(this, _ThemeManager_instances, \"a\", _ThemeManager_localStorage_get).get(themeId);\n    }\n    modifyTheme(themeId, themeData) {\n        const exisitingTheme = this.getTheme(themeId);\n        const modifiedTheme = { ...exisitingTheme, ...themeData };\n        __classPrivateFieldGet(this, _ThemeManager_instances, \"a\", _ThemeManager_localStorage_get).set(themeId, modifiedTheme);\n    }\n    addTheme(theme) {\n        if (this.getTheme(theme.id)) {\n            throw new Error(\"\");\n        }\n        __classPrivateFieldGet(this, _ThemeManager_instances, \"a\", _ThemeManager_localStorage_get).set(theme.id, theme);\n    }\n    removeTheme(themeId) {\n    }\n}\n_ThemeManager_currentTheme = new WeakMap(), _ThemeManager_instances = new WeakSet(), _ThemeManager_buildThemeCss = function _ThemeManager_buildThemeCss(theme) { }, _ThemeManager_destroyThemeCss = function _ThemeManager_destroyThemeCss(themeId) { }, _ThemeManager_setRootClass = function _ThemeManager_setRootClass(themeId) { }, _ThemeManager_localStorage_get = function _ThemeManager_localStorage_get() {\n    return {\n        set: (themeId, data) => {\n            localStorage.setItem(themeId, JSON.stringify(data));\n        },\n        get: (themeId) => {\n            const data = localStorage.getItem(themeId);\n            if (!data)\n                return null;\n            return JSON.parse(data);\n        },\n    };\n};\nexport default ThemeManager;\n",
			"index.js": "import ThemeManager from \"./ThemeManager.js\";\nexport { ThemeManager };\n"
		},
		"utils": {
			"colors.js": "export function hex() { }\nexport function rgb() { }\nexport function rgba() { }\nexport function hsl() { }\nexport function lch() { }\nexport function oklch() { }\n",
			"dom.js": "\nexport function createElement(tag, attributes, children = []) {\n    const element = document.createElement(tag);\n    setAttributes(element, attributes);\n    \n    for (const child of children) {\n        element.append(child);\n    }\n    return element;\n}\nexport function setAttributes(element, attributes) {\n    for (const [key, value] of Object.entries(attributes)) {\n        switch (key) {\n            case \"innerHTML\":\n                element[key] = value.trim();\n                break;\n            case \"innerText\":\n                element[key] = value.trim();\n                break;\n            case \"dataset\":\n                for (const [dataKey, dataValue] of Object.entries(value)) {\n                    element.dataset[dataKey] = dataValue;\n                }\n                break;\n            default:\n                element[key] = value;\n                break;\n        }\n    }\n    return element;\n}\n",
			"files.js": "import { createElement } from \"./dom.js\";\nexport function createFile(content, props) {\n    if (!props.name) {\n        throw new Error('Missing property \"name\" is required');\n    }\n    if (!props.type) {\n        throw new Error('Missing property \"type\" is required');\n    }\n    const file = new Blob([content], { type: props.type });\n    const url = URL.createObjectURL(file);\n    const downloadLink = createElement(\"a\", {\n        href: url,\n        download: props.name,\n        style: \"display:none\",\n        dataset: {\n            attached: false,\n        },\n    });\n    const download = () => {\n        if (downloadLink.dataset.attached === \"false\") {\n            document.body.appendChild(downloadLink);\n            downloadLink.dataset.attached = \"true\";\n        }\n        downloadLink.click();\n    };\n    const remove = () => {\n        document.body.removeChild(downloadLink);\n        URL.revokeObjectURL(url);\n    };\n    return {\n        file,\n        url,\n        filename: props.name,\n        filetype: props.type,\n        download,\n        remove,\n    };\n}\n",
			"index.js": "export * from \"./dom.js\";\nexport * from \"./files.js\";\n"
		}
	}
}
